{"version":3,"sources":["components/Header.js","components/Footer.js","components/FormsComponent.js","containers/InputForm.js","App.js","serviceWorker.js","index.js","wim.jpg"],"names":["Header","className","src","wim","alt","class","href","Footer","FormsComponent","props","type","min","name","value","data","datPopulation","placeholder","onChange","handleChange","id","timeToElapse","reportedCases","totalHospitalBeds","periodType","dataPopulation","InputForm","state","bind","event","target","checked","this","setState","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"kPA0BeA,EAvBA,WACb,OACE,6BACE,4BAAQC,UAAU,UAClB,+BACE,yBAAKC,IAAKC,IAAKC,IAAI,kBAAkBC,MAAM,gBAE3C,yBAAKJ,UAAU,QACd,iDACA,4DAED,yBAAKA,UAAU,WACd,wDACA,uBAAGK,KAAK,yDACP,2DAIJ,+BCTSC,EAVA,WACd,OACC,gCACC,6BACA,0DACA,sG,0CC8EYC,EAnFQ,SAACC,GACvB,OACC,8BACC,gCACC,8BACC,2DACA,6DAAkC,6BAAlC,iCACA,8CACA,2BACAC,KAAK,SACLC,IAAI,IACJC,KAAK,iBACLC,MAAQJ,EAAMK,KAAKC,cACnBC,YAAY,mBACZC,SAAWR,EAAMS,aACjBC,GAAG,kBACHlB,UAAU,oBAEV,6BAAM,6BACN,iDACA,2BACCS,KAAK,SACLC,IAAI,IACJC,KAAK,eACLC,MAAQJ,EAAMK,KAAKM,aACnBJ,YAAY,iBACZC,SAAWR,EAAMS,aACjBC,GAAG,sBACHlB,UAAU,wBAEX,6BAAM,6BACN,iDACA,2BACCS,KAAK,SACLC,IAAI,IACJC,KAAK,gBACLC,MAAQJ,EAAMK,KAAKO,cACnBL,YAAY,iBACZC,SAAWR,EAAMS,aACjBC,GAAG,sBACHlB,UAAU,wBAEX,6BAAM,6BACN,sDACA,2BACCS,KAAK,SACLC,IAAI,IACJC,KAAK,oBACLC,MAAQJ,EAAMK,KAAKQ,kBACnBN,YAAY,sBACZC,SAAWR,EAAMS,aACjBC,GAAG,2BACHlB,UAAU,6BAEX,6BAAM,6BACN,+CACK,4BACIY,MAAQJ,EAAMK,KAAKS,WACnBN,SAAWR,EAAMS,aACjBN,KAAK,cAER,mDACE,4BAAQC,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,WAEJ,6BAAM,6BACP,4CAGF,6BACA,yBAAKZ,UAAU,UACd,oDACA,0CAAiBQ,EAAMK,KAAKU,gBAC5B,8CAAqBf,EAAMK,KAAKM,cAChC,8CAAqBX,EAAMK,KAAKO,eAChC,mDAA0BZ,EAAMK,KAAKQ,mBACrC,2CAAkBb,EAAMK,KAAKS,eChDrBE,E,kDA3Bd,aAAe,IAAD,8BACb,gBACKC,MAAQ,CACZF,eAAgB,GAChBJ,aAAc,GACdC,cAAe,GACfC,kBAAmB,GACnBC,WAAY,IAEb,EAAKL,aAAe,EAAKA,aAAaS,KAAlB,gBATP,E,yDAYAC,GAAQ,IAAD,EACmBA,EAAMC,OAApCjB,EADW,EACXA,KAAMC,EADK,EACLA,MAAOH,EADF,EACEA,KAAMoB,EADR,EACQA,QACjB,aAATpB,EACEqB,KAAKC,SAAL,eAAiBpB,EAAOkB,IACxBC,KAAKC,SAAL,eAAiBpB,EAAOC,M,+BAI5B,OACC,kBAAC,EAAD,CACAC,KAAOiB,KAAKL,MACZR,aAAea,KAAKb,mB,GAxBCe,a,MCeTC,MAVf,WACE,OACE,yBAAKjC,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,MCDckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.17f52835.chunk.js","sourcesContent":["import React from 'react';\r\nimport wim from '../wim.jpg';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <header className=\"header\">\r\n      <image>\r\n        <img src={wim} alt=\"Wim von Benecke\" class=\"profilePic\" />\r\n      </image>\r\n        <div className=\"name\">\r\n        \t<h1>Andela Assessment</h1>\r\n        \t<h3>Prepared by Wim von Benecke</h3>\r\n        </div> \r\n        <div className=\"contact\">\r\n        \t<p>Cell: +27 (0) 71 099 2811</p>\r\n        \t<a href=\"mailto:info@lesawi.co.za?subject=Covid19 page inquiry\">\r\n        \t\t<h3>Email: info@lesawi.co.za</h3>\r\n        \t</a>\r\n        </div> \r\n      </header>\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n\treturn (\r\n\t\t<footer>\r\n\t\t\t<hr />\r\n\t\t\t<h1>Footer content to be added</h1>\r\n\t\t\t<p>&copy;Andela Project - Andela builds remote engineering teams that work</p>\r\n\t\t</footer>\r\n\t);\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nconst FormsComponent = (props) => {\r\n\treturn(\r\n\t\t<main>\r\n\t\t\t<header>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<h1>Information to be processed</h1>\r\n\t\t\t\t\t<h3>Please make sure to check your<br />input below before submitting</h3>\r\n\t\t\t\t\t<label>Population:</label>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\tmin=\"0\" \r\n\t\t\t\t\tname=\"dataPopulation\" \r\n\t\t\t\t\tvalue={ props.data.datPopulation } \r\n\t\t\t\t\tplaceholder=\"Total Population\" \r\n\t\t\t\t\tonChange={ props.handleChange }\r\n\t\t\t\t\tid=\"data-population\"\r\n\t\t\t\t\tclassName=\"data-population\" \t\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<br /><br />\r\n\t\t\t\t\t<label>Time To Elapse</label>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tmin=\"0\" \r\n\t\t\t\t\t\tname=\"timeToElapse\" \r\n\t\t\t\t\t\tvalue={ props.data.timeToElapse } \r\n\t\t\t\t\t\tplaceholder=\"Time To Elapse\" \r\n\t\t\t\t\t\tonChange={ props.handleChange }\r\n\t\t\t\t\t\tid=\"data-time-to-elapse\"\r\n\t\t\t\t\t\tclassName=\"data-time-to-elapse\" \t\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<br /><br />\r\n\t\t\t\t\t<label>Reported Cases</label>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tmin=\"0\" \r\n\t\t\t\t\t\tname=\"reportedCases\" \r\n\t\t\t\t\t\tvalue={ props.data.reportedCases } \r\n\t\t\t\t\t\tplaceholder=\"Reported Cases\" \r\n\t\t\t\t\t\tonChange={ props.handleChange }\r\n\t\t\t\t\t\tid=\"data-reported-cases\"\r\n\t\t\t\t\t\tclassName=\"data-reported-cases\"\t\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<br /><br />\r\n\t\t\t\t\t<label>Total Hospital Beds</label>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"number\" \r\n\t\t\t\t\t\tmin=\"0\" \r\n\t\t\t\t\t\tname=\"totalHospitalBeds\" \r\n\t\t\t\t\t\tvalue={ props.data.totalHospitalBeds } \r\n\t\t\t\t\t\tplaceholder=\"Total Hospital Beds\" \r\n\t\t\t\t\t\tonChange={ props.handleChange }\r\n\t\t\t\t\t\tid=\"data-total-hospital-beds\"\r\n\t\t\t\t\t\tclassName=\"data-total-hospital-beds\"\t\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<br /><br />\r\n\t\t\t\t\t<label>Period Type:</label>\r\n\t\t        <select \r\n\t\t            value={ props.data.periodType }\r\n\t\t            onChange={ props.handleChange }\r\n\t\t            name=\"periodType\"\r\n\t\t        >\r\n\t\t        \t<option>--Select  one--</option>\r\n\t            <option value=\"days\">Days</option>\r\n\t            <option value=\"weeks\">Weeks</option>\r\n\t            <option value=\"months\">months</option>\r\n\t\t        </select>\r\n\t        <br /><br />\r\n\t      \t<button>Submit</button>\r\n\t\t\t\t</form>\t\t\t\t\t\t\r\n\t\t\t</header>\r\n      <hr />\r\n      <div className=\"output\">\r\n\t      <h2>Entered information:</h2>\r\n\t      <p>Population: { props.data.dataPopulation }</p>\r\n\t      <p>Time To Elapse: { props.data.timeToElapse }</p>\r\n\t      <p>Reported Cases: { props.data.reportedCases }</p>\r\n\t      <p>Total Hospital Beds: { props.data.totalHospitalBeds }</p>\r\n\t      <p>Period Type: { props.data.periodType }</p>\r\n      </div>\r\n    </main>\r\n\t)\r\n}\r\n\r\nexport default FormsComponent;","import React, { Component } from 'react';\r\nimport FormsComponent from '../components/FormsComponent.js';\r\n\r\nclass InputForm extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tdataPopulation: '',\r\n\t\t\ttimeToElapse: '',\r\n\t\t\treportedCases: '',\r\n\t\t\ttotalHospitalBeds: '',\r\n\t\t\tperiodType: ''\r\n\t\t}\r\n\t\tthis.handleChange = this.handleChange.bind(this)\r\n\t}\r\n\r\n  handleChange(event) {\r\n    const {name, value, type, checked} = event.target\r\n    type === \"checkbox\" \r\n    ? this.setState({ [name]: checked }) \r\n    : this.setState({ [name]: value })\r\n  }\r\n  \t\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<FormsComponent \r\n\t\t\tdata={ this.state }\r\n\t\t\thandleChange={ this.handleChange} />\r\n\t\t)}\r\n\t}\r\n\r\nexport default InputForm;","import React from 'react';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport InputForm from './containers/InputForm';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"tc\">\n      <Header />\n      <InputForm />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/wim.79d5114f.jpg\";"],"sourceRoot":""}